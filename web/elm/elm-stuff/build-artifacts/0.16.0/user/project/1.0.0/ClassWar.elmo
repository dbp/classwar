Elm.ClassWar = Elm.ClassWar || {};
Elm.ClassWar.make = function (_elm) {
   "use strict";
   _elm.ClassWar = _elm.ClassWar || {};
   if (_elm.ClassWar.values) return _elm.ClassWar.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm);
   var _op = {};
   var view = F2(function (address,model) {
      return A2($Html.ul,
      _U.list([$Html$Attributes.$class("seats")]),
      _U.list([A2($Html.li,
      _U.list([]),
      _U.list([$Html.text("hello")]))]));
   });
   var update = F2(function (action,model) {
      var _p0 = action;
      return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
   });
   var NoOp = {ctor: "NoOp"};
   var init = {ctor: "_Tuple2",_0: {},_1: $Effects.none};
   var Model = {};
   var app = $StartApp.start({init: init
                             ,update: update
                             ,view: view
                             ,inputs: _U.list([])});
   var main = app.html;
   return _elm.ClassWar.values = {_op: _op
                                 ,app: app
                                 ,main: main
                                 ,Model: Model
                                 ,init: init
                                 ,NoOp: NoOp
                                 ,update: update
                                 ,view: view};
};